sample(words,10000,replace=T))
table(c_var)
#Add another 10000 misspellings
f_var <- c(f_var,
factor(sample(words,10000,replace=T)))
f_var
df <- data.frame(
x = rnorm(100),
grp = sample(c("Cat","Dog","Mouse")),
y = x + (grp == "Cat")*2 - (grp == "Dog")*2 + rnorm(100,0,0.1)
)
df <- tibble(
x = rnorm(100),
grp = sample(c("Cat","Dog","Mouse")),
y = x + (grp == "Cat")*2 - (grp == "Dog")*2 + rnorm(100,0,0.1)
)
eg_df <- tibble(
c_var = c("Cat","Dog","Cat","Mouse","Mouse"),
f_var = factor(c("Cat","Dog","Cat","Mouse","Mouse"))
)
set.seed(15102020)
library(tidyverse)
eg_df <- tibble(
c_var = c("Cat","Dog","Cat","Mouse","Mouse"),
f_var = factor(c("Cat","Dog","Cat","Mouse","Mouse"))
)
eg_df
set.seed(15102020)
library(tidyverse)
eg_df <- tibble(
c_var = c("Cat","Dog","Cat","Mouse","Mouse"),
f_var = factor(c("Cat","Dog","Cat","Mouse","Mouse"))
)
eg_df
df <- tibble(
x = rnorm(100),
grp = sample(c("Cat","Dog","Mouse")),
y = x + (grp == "Cat")*2 - (grp == "Dog")*2 + rnorm(100,0,0.1)
)
df <- tibble(
x = rnorm(100),
grp = sample(c("Cat","Dog","Mouse"),100,replace=T),
y = x + (grp == "Cat")*2 - (grp == "Dog")*2 + rnorm(100,0,0.1)
)
#Generate a random dataset:
df <- tibble(
x = rnorm(100),
grp = sample(c("Cat","Dog","Mouse"),100,replace=T),
y = x + (grp == "Cat")*2 - (grp == "Dog")*2 + rnorm(100,0,0.1)
)
#Generate a random dataset:
df <- tibble(
x = rnorm(100),
grp = sample(c("Cat","Dog","Mouse"),100,replace=T),
y = x + (grp == "Cat")*2 - (grp == "Dog")*2 + rnorm(100,0,0.1)
)
ggplot(df,aes(x,y,col=grp)) +
geom_point()
#Generate a random dataset:
df <- tibble(
x = rnorm(100),
grp = sample(c("Cat","Dog","Mouse"),100,replace=T),
y = x + (grp == "Cat")*2 - (grp == "Dog")*2 + rnorm(100,0,0.3)
)
ggplot(df,aes(x,y,col=grp)) +
geom_point()
#Generate a random dataset:
df <- tibble(
x = rnorm(100),
grp = sample(c("Cat","Dog","Mouse"),100,replace=T),
y = x + (grp == "Cat")*2 - (grp == "Dog")*2 + rnorm(100,0,0.3)
)
ggplot(df,aes(x,y,col=grp)) +
geom_point()
lm(y ~ x + grp, data=df)
#Generate a random dataset:
df <- tibble(
x = rnorm(100),
grp = sample(c("Cat","Dog","Mouse"),100,replace=T),
y = x + (grp == "Cat")*2 - (grp == "Dog")*2 + rnorm(100,0,0.3)
)
ggplot(df,aes(x,y,col=grp)) +
geom_point()
mod <- lm(y ~ x + grp, data=df)
mod
eg_df <- data.frame(
c_var = c("Cat","Dog","Cat","Mouse","Mouse"),
f_var = factor(c("Cat","Dog","Cat","Mouse","Mouse"))
)
eg_df
eg_df <- data.frame(
c_var = c("Cat","Dog","Cat","Mouse","Mouse"),
f_var = factor(c("Cat","Dog","Cat","Mouse","Mouse"))
)
eg_df
eg_df$f_var
as.numeric(eg_df$f_var)
eg_df <- tibble(
c_var = c("Cat","Dog","Cat","Mouse","Mouse"),
f_var = factor(c("Cat","Dog","Cat","Mouse","Mouse"))
)
eg_df
df <- tibble() #declare an empty tibble()
df
dictionary()
?dictionary
install.packages("lexicon")
head(lexicon::available_data())
nrow(lexicon::available_data())
lexicon::cliches
lexicon::available_data()
lexicon::available_data()[47,]
sw_fry_1000
lexicon::sw_fry_1000
library(lexicon)
these_words <- sample(sw_fry_1000,distinct_words)
distinct_words <- round(rexp(1,1/100))
these_words <- sample(sw_fry_1000,distinct_words)
these_words
library(lexicon)
df <- tibble(id=1:1000) #declare a tibble with just an id variable
for(i in 1:100)
{
distinct_words <- round(rexp(1,1/100))
these_words <- sample(sw_fry_1000,distinct_words)
df$new_var <- sample(these_words,1000,replace=T)
}
library(lexicon)
df <- tibble(id=1:1000) #declare a tibble with just an id variable
for(i in 1:100)
{
distinct_words <- round(rexp(1,1/100))
these_words <- sample(sw_fry_1000,distinct_words)
df$new_var <- sample(these_words,1000,replace=T)
}
library(lexicon)
df <- tibble(id=1:1000) #declare a tibble with just an id variable
for(i in 1:100)
{
distinct_words <- round(rexp(1,1/100))
these_words <- sample(sw_fry_1000,distinct_words)
df$new_var <- sample(these_words,1000,replace=T)
df <- rename(df,new_var = paste0("var_",i))
}
library(lexicon)
df <- tibble(id=1:1000) #declare a tibble with just an id variable
for(i in 1:100)
{
distinct_words <- round(rexp(1,1/100))
these_words <- sample(sw_fry_1000,distinct_words)
df$new_var <- sample(these_words,1000,replace=T)
names(df)[i+1] <- paste0("var_",i)
}
dim(df)
library(lexicon)
df <- tibble(id=1:1000) #declare a tibble with just an id variable
for(i in 1:100)
{
#How many distinct words should this variable have?
distinct_words <- round(rexp(1,1/100))
these_words <- sample(sw_fry_1000,distinct_words)
df[[paste0("var_",i)]] <- sample(these_words,1000,replace=T)
}
dim(df)
df
available_data()
library(lexicon)
df <- tibble(id=1:1000) #declare a tibble with just an id variable
for(i in 1:100)
{
#How many distinct words should this variable have?
distinct_words <- round(rexp(1,1/100))
#What words can we choose from for this variable?
these_words <- sample(sw_fry_1000,distinct_words)
#What's the name of this variable?
this_name <- paste0("var_",i)
#Generate the variable
this_variable <- sample(these_words,1000,replace=T)
#Store it in the tibble
df[[this_name]] <- this_variable
}
df <- tibble(id=1:1000) #declare a tibble with just an id variable
i <- 1
distinct_words <- round(rexp(1,1/100))
these_words <- sample(sw_fry_1000,distinct_words)
these_words
this_name <- paste0("var_",i)
this_name
this_variable <- sample(these_words,1000,replace=T)
tthis_variable
this_variable
df[[this_name]]
df[[this_name]] <- this_variable
head(df)
df
library(lexicon)
df <- tibble(id=1:1000) #declare a tibble with just an id variable
for(i in 1:100)
{
#How many distinct words should this variable have?
distinct_words <- round(rexp(1,1/100))
#What words can we choose from for this variable?
these_words <- sample(sw_fry_1000,distinct_words)
#What's the name of this variable?
this_name <- paste0("var_",i)
#Generate the variable
this_variable <- sample(these_words,1000,replace=T)
#Store it in the tibble
df[[this_name]] <- this_variable
}
df
library(lexicon)
df <- tibble(id=1:1000) #declare a tibble with just an id variable
for(i in 1:10)
{
#How many distinct words should this variable have?
distinct_words <- round(rexp(1,1/100))
#What words can we choose from for this variable?
these_words <- sample(sw_fry_1000,distinct_words)
#What's the name of this variable?
this_name <- paste0("var_",i)
#Generate the variable
this_variable <- sample(these_words,1000,replace=T)
#Store it in the tibble
df[[this_name]] <- this_variable
}
df
library(lexicon)
df <- tibble(id=1:1000) #declare a tibble with just an id variable
for(i in 1:10)
{
#How many distinct words should this variable have?
distinct_words <- round(rexp(1,1/10))
#What words can we choose from for this variable?
these_words <- sample(sw_fry_1000,distinct_words)
#What's the name of this variable?
this_name <- paste0("var_",i)
#Generate the variable
this_variable <- sample(these_words,1000,replace=T)
#Store it in the tibble
df[[this_name]] <- this_variable
}
df
library(lexicon)
df <- tibble(id=1:1000) #declare a tibble with just an id variable
for(i in 1:10)
{
#How many distinct words should this variable have?
distinct_words <- round(rexp(1,1/20))
#What words can we choose from for this variable?
these_words <- sample(sw_fry_1000,distinct_words)
#What's the name of this variable?
this_name <- paste0("var_",i)
#Generate the variable
this_variable <- sample(these_words,1000,replace=T)
#Store it in the tibble
df[[this_name]] <- this_variable
}
df
library(lexicon)
df <- tibble(id=1:1000) #declare a tibble with just an id variable
for(i in 1:10)
{
#How many distinct words should this variable have?
distinct_words <- round(rexp(1,1/20))
#What words can we choose from for this variable?
these_words <- sample(sw_fry_1000,distinct_words)
#What's the name of this variable?
this_name <- paste0("var_",i)
#Generate the variable
this_variable <- sample(these_words,1000,replace=T)
#Store it in the tibble
df[[this_name]] <- this_variable
#Approximated 1/3 of the time, we'll add a numeric variable
if(rbinom(1,1,1/3) == 1){
this_name <- paste0("num_",ncol(df)+1)
df[[this_name]] <- rnorm(1000)
}
}
df
library(lexicon)
df <- tibble(id=1:1000) #declare a tibble with just an id variable
for(i in 1:10)
{
#How many distinct words should this variable have?
distinct_words <- round(rexp(1,1/20))
#What words can we choose from for this variable?
these_words <- sample(sw_fry_1000,distinct_words)
#What's the name of this variable?
this_name <- paste0("var_",ncol(df) + 1)
#Generate the variable
this_variable <- sample(these_words,1000,replace=T)
#Store it in the tibble
df[[this_name]] <- this_variable
#Approximated 1/3 of the time, we'll add a numeric variable
if(rbinom(1,1,1/3) == 1){
this_name <- paste0("var_",ncol(df)+1)
df[[this_name]] <- rnorm(1000)
}
}
df
df %>%
mutate(across(where(is.character),as.factor))
library(Rcpp)
?Rcpp
00
words <- c("Cat","Dog","Mouse")
df <- tibble(
id=1:n,
c_var = sample(words,n,replace=T),
f_var = factor(c_var)
)
n <- 100
words <- c("Cat","Dog","Mouse")
df <- tibble(
id=1:n,
c_var = sample(words,n,replace=T),
f_var = factor(c_var)
)
df
C_ObjectSize <- cppFunction(
'NumericVector C_ObjectSize(DataFrame x){
NumericVector c_var = x["c_var"];
RObject f_var = x["f_var"];
NumericVector res(3);
res[1] = sizeof(x);
res[2] = sizeof(c_var);
res[3] = sizeof(f_var);
return res;
')
C_ObjectSize <- cppFunction(
'NumericVector C_ObjectSize(DataFrame x){
NumericVector c_var = x["c_var"];
RObject f_var = x["f_var"];
NumericVector res(3);
res[1] = sizeof(x);
res[2] = sizeof(c_var);
res[3] = sizeof(f_var);
return res;
}')
C_ObjectSize(df)
C_ObjectSize <- cppFunction(
'NumericVector C_ObjectSize(DataFrame x){
NumericVector c_var = x["c_var"];
RObject f_var = x["f_var"];
std::size_t total_size = sizeof(x);
std::size_t char_size = sizeof(c_var);
std::size_t fact_size = sizeof(f_var);
NumericVector res(3);
res[1] = static_cast<int>(total_size);
res[2] = static_cast<int>(c_var);
res[3] = static_cast<int>(f_var);
return res;
}')
C_ObjectSize <- cppFunction(
'double C_ObjectSize(DataFrame x){
NumericVector c_var = x["c_var"];
RObject f_var = x["f_var"];
std::size_t total_size = sizeof(x);
std::size_t char_size = sizeof(c_var);
std::size_t fact_size = sizeof(f_var);
double res(3);
res[1] = static_cast<double>(total_size);
res[2] = static_cast<double>(c_var);
res[3] = static_cast<double>(f_var);
return res;
}')
n <- 100
words <- c("Cat","Dog","Mouse")
df <- tibble(
id=1:n,
c_var = sample(words,n,replace=T),
f_var = factor(c_var)
)
C_ObjectSize(df)
C_ObjectSize <- cppFunction(
'NumericVector C_ObjectSize(DataFrame x){
NumericVector c_var = x["c_var"];
RObject f_var = x["f_var"];
std::size_t total_size = sizeof(x);
std::size_t char_size = sizeof(c_var);
std::size_t fact_size = sizeof(f_var);
NumericVector res(3);
res[0] = static_cast<double>(total_size);
res[1] = static_cast<double>(c_var);
res[2] = static_cast<double>(f_var);
return res;
}')
C_ObjectSize <- cppFunction(
'NumericVector C_ObjectSize(DataFrame x){
StringVector c_var = x["c_var"];
RObject f_var = x["f_var"];
std::size_t total_size = sizeof(x);
std::size_t char_size = sizeof(c_var);
std::size_t fact_size = sizeof(f_var);
NumericVector res(3);
res[0] = static_cast<double>(total_size);
res[1] = static_cast<double>(c_var);
res[2] = static_cast<double>(f_var);
return res;
}')
C_ObjectSize <- cppFunction(
'NumericVector C_ObjectSize(DataFrame x){
StringVector c_var = x["c_var"];
RObject f_var = x["f_var"];
std::size_t total_size = sizeof(x);
std::size_t char_size = sizeof(c_var);
std::size_t fact_size = sizeof(f_var);
NumericVector res(3);
res[0] = static_cast<double>(total_size);
res[1] = static_cast<double>(c_var);
res[2] = static_cast<double>(f_var);
return res;
}')
C_ObjectSize <- cppFunction(
'NumericVector C_ObjectSize(DataFrame x){
StringVector c_var = x["c_var"];
RObject f_var = x["f_var"];
std::size_t total_size = sizeof(x);
std::size_t char_size = sizeof(c_var);
std::size_t fact_size = sizeof(f_var);
NumericVector res(3);
res[0] = static_cast<double>(total_size);
res[1] = static_cast<double>(char_size);
res[2] = static_cast<double>(fact_size);
return res;
}')
C_ObjectSize(df)
bench::mark(
char = table(df$c_var),
fact = table(df$f_var)
)
?as_factor
?as.factor
df <- tibble(id=1:1000) #declare a tibble with just an id variable
for(i in 1:10)
{
#How many distinct words should this variable have?
distinct_words <- round(rexp(1,1/20))
#What words can we choose from for this variable?
these_words <- sample(sw_fry_1000,distinct_words)
#What's the name of this variable?
this_name <- paste0("var_",ncol(df) + 1)
#Generate the variable
this_variable <- sample(these_words,1000,replace=T)
#Store it in the tibble
df[[this_name]] <- this_variable
#Approximated 1/3 of the time, we'll add a numeric variable
if(rbinom(1,1,1/3) == 1){
this_name <- paste0("var_",ncol(df)+1)
df[[this_name]] <- rnorm(1000)
}
}
df
set.seed(15102020)
library(tidyverse) #We'll use tidyverse functions
library(magrittr) #A few extra pipes from magrittr
library(lexicon) #For a word dictionary
df <- tibble(id=1:1000) #declare a tibble with just an id variable
for(i in 1:10)
{
#How many distinct words should this variable have?
distinct_words <- round(rexp(1,1/20))
#What words can we choose from for this variable?
these_words <- sample(sw_fry_1000,distinct_words)
#What's the name of this variable?
this_name <- paste0("var_",ncol(df) + 1)
#Generate the variable
this_variable <- sample(these_words,1000,replace=T)
#Store it in the tibble
df[[this_name]] <- this_variable
#Approximated 1/3 of the time, we'll add a numeric variable
if(rbinom(1,1,1/3) == 1){
this_name <- paste0("var_",ncol(df)+1)
df[[this_name]] <- rnorm(1000)
}
}
these_words
distinct_words
set.seed(15102020)
library(tidyverse) #We'll use tidyverse functions
library(magrittr) #A few extra pipes from magrittr
library(lexicon) #For a word dictionary
df <- tibble(id=1:1000) #declare a tibble with just an id variable
for(i in 1:10)
{
#How many distinct words should this variable have?
distinct_words <- round(rexp(1,1/20)) +1
#What words can we choose from for this variable?
these_words <- sample(sw_fry_1000,distinct_words)
#What's the name of this variable?
this_name <- paste0("var_",ncol(df) + 1)
#Generate the variable
this_variable <- sample(these_words,1000,replace=T)
#Store it in the tibble
df[[this_name]] <- this_variable
#Approximated 1/3 of the time, we'll add a numeric variable
if(rbinom(1,1,1/3) == 1){
this_name <- paste0("var_",ncol(df)+1)
df[[this_name]] <- rnorm(1000)
}
}
df
set.seed(15102020)
library(tidyverse) #We'll use tidyverse functions
library(magrittr) #A few extra pipes from magrittr
library(lexicon) #For a word dictionary
df %<>% mutate(across(where(is.character),as_factor))
#Update the df by mutating it across variables where it is a character, and perform as_factor
df
blogdown::update_hugo()
blogdown::serve_site()
